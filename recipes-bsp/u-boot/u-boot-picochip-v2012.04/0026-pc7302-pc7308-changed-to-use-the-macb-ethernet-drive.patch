From 09e3006dfd3d536ce524a06974825e916a934ec9 Mon Sep 17 00:00:00 2001
From: Dave Aldridge <david.aldridge@picochip.com>
Date: Wed, 10 Aug 2011 11:43:21 +0100
Subject: [PATCH 26/70] pc7302/pc7308: changed to use the macb ethernet driver

---
 arch/arm/cpu/arm926ejs/picoxcell/Makefile  |    1 -
 arch/arm/cpu/arm926ejs/picoxcell/cpu.c     |   27 +-
 arch/arm/cpu/arm926ejs/picoxcell/emac.c    |  819 ----------------------------
 arch/arm/include/asm/arch-picoxcell/clk.h  |   27 +
 arch/arm/include/asm/arch-picoxcell/emac.h |  189 -------
 include/configs/picochippc7302-common.h    |    6 +-
 include/configs/picochippc7308.h           |    6 +-
 include/netdev.h                           |    1 -
 8 files changed, 39 insertions(+), 1037 deletions(-)
 delete mode 100644 arch/arm/cpu/arm926ejs/picoxcell/emac.c
 create mode 100644 arch/arm/include/asm/arch-picoxcell/clk.h
 delete mode 100644 arch/arm/include/asm/arch-picoxcell/emac.h

diff --git a/arch/arm/cpu/arm926ejs/picoxcell/Makefile b/arch/arm/cpu/arm926ejs/picoxcell/Makefile
index 2d8ca9f..3cb42f2 100644
--- a/arch/arm/cpu/arm926ejs/picoxcell/Makefile
+++ b/arch/arm/cpu/arm926ejs/picoxcell/Makefile
@@ -45,7 +45,6 @@ LIB	= $(obj)lib$(SOC).o
 SOBJS-y := reset.o
 
 COBJS-y += cpu.o
-COBJS-y += emac.o
 COBJS-y += timer.o
 COBJS-y += spi.o
 COBJS-y += utilities.o
diff --git a/arch/arm/cpu/arm926ejs/picoxcell/cpu.c b/arch/arm/cpu/arm926ejs/picoxcell/cpu.c
index f67b701..e65bf17 100644
--- a/arch/arm/cpu/arm926ejs/picoxcell/cpu.c
+++ b/arch/arm/cpu/arm926ejs/picoxcell/cpu.c
@@ -30,15 +30,7 @@
 
 /* Functions --------------------------------------------------------------- */
 
-/*****************************************************************************
- *
- * print_cpuinfo()
- *
- * Purpose: Display some useful info about the cpu we are running on.
- *
- * Returns: 0 - Success
- *
- *****************************************************************************/
+#if defined(CONFIG_DISPLAY_CPUINFO)
 int print_cpuinfo (void)
 {
 	const char *part = picoxcell_get_partname ();
@@ -48,22 +40,15 @@ int print_cpuinfo (void)
 
 	return 0;
 }
+#endif
 
-/*****************************************************************************
- *
- * cpu_eth_init()
- *
- * Purpose: Initialize the Ethernet controller
- *
- * Returns: 0 - Success
- *
- *****************************************************************************/
-int cpu_eth_init (bd_t * bis)
+int cpu_eth_init (bd_t *bis)
 {
 	int ret = -1;
 
-#ifdef CONFIG_DW_EMAC
-	ret = picoxcell_eth_register (bis);
+#ifdef CONFIG_MACB
+	ret = macb_eth_initialize (0, (void *)PICOXCELL_EMAC_BASE,
+				   CONFIG_PHY_ADDR);
 #endif
 
 	return ret;
diff --git a/arch/arm/cpu/arm926ejs/picoxcell/emac.c b/arch/arm/cpu/arm926ejs/picoxcell/emac.c
deleted file mode 100644
index e4aba1a..0000000
--- a/arch/arm/cpu/arm926ejs/picoxcell/emac.c
+++ /dev/null
@@ -1,819 +0,0 @@
-/*****************************************************************************
- * $picoChipHeaderSubst$
- *****************************************************************************/
-
-/*!
- * \file emac.c
- * \brief Ethernet driver.
- *
- * Copyright (c) 2006-2011 Picochip Ltd
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- *
- * All enquiries to support@picochip.com
- */
-
-/* Includes ---------------------------------------------------------------- */
-#include <common.h>
-
-#ifdef CONFIG_DW_EMAC
-
-#include <malloc.h>
-#include <asm/errno.h>
-#include <net.h>
-#include <miiphy.h>
-#include <asm/io.h>
-#include <asm/arch/picoxcell.h>
-#include <asm/arch/emac.h>
-#include <asm/arch/utilities.h>
-
-/* Macros ------------------------------------------------------------------ */
-
-/*!
- * \brief Timeout value (in uS) for various EMAC operations
- */
-#define EMAC_TX_TIMEOUT             (1000)
-
-/*!
- * \brief Timeout value (in mS) for various PHY operations
- */
-#define EMAC_PHY_TIMEOUT            (2000)
-
-/*!
- * \brief Length (in bytes) of a MAC address
- */
-#define EMAC_LENGTH_OF_MAC_ADDRESS  (6)
-
-/*!
- * \brief Default receive and transmit ring lengths
- */
-#define EMAC_RX_NUM_DESCRIPTOR      (8)
-#define EMAC_TX_NUM_DESCRIPTOR      (2)
-#define EMAC_DESCRIPTOR_BUF_SIZE    (2048)
-
-/*!
- * \brief Values used in the emac_priv structure
- */
-#define EMAC_PHY_SPEED_10           (0)
-#define EMAC_PHY_SPEED_100          (1)
-#define EMAC_PHY_DUPLEX_HALF        (0)
-#define EMAC_PHY_DUPLEX_FULL        (1)
-#define EMAC_PHY_LINK_DOWN          (0)
-#define EMAC_PHY_LINK_UP            (1)
-#define EMAC_PHY_AUTO_NEG_COMPLETE  (1)
-
-/*!
- * \brief Macros used to read from, and write to, emac registers
- */
-#define EMAC_READ(__offset) \
-                 (*((volatile u32*)(PICOXCELL_EMAC_BASE + __offset)))
-
-#define EMAC_WRITE(__value, __offset) \
-                  (*((volatile u32*)(PICOXCELL_EMAC_BASE + __offset)) = __value)
-
-/*!
- * \brief Define the auto-negotiation advertisement register
- *        value.
- *
- * Note: This advertises 100 mpbs capability only.
- */
-#define PHY_AUTO_NEG_ADVERT_VALUE   (0x0181)
-
-/*!
- * \brief Align an item to a 64-bit boundary.
- */
-#define __align64b  __attribute__((aligned(8)))
-
-/* Constants --------------------------------------------------------------- */
-
-/*!
- * \brief This structure defines the format of the Ethernet MAC
- *        Tx and Rx descriptors.
- */
-struct emac_dma_descriptor {
-	/*! Used to define the Rx/Tx buffer address */
-	unsigned int buffer;
-
-	/*! Used to contain the status of the Rx/Tx operation */
-	unsigned int status;
-};
-
-/*!
- * \brief This structure is used to hold private data for the network code
- */
-struct emac_priv {
-	/* Useful phy state */
-	unsigned int auto_negotiation;
-	unsigned int speed;
-	unsigned int duplex;
-	unsigned int link;
-
-	/* Rx descriptor count */
-	unsigned int rx_desc;
-
-	/* Tx descriptor count */
-	unsigned int tx_desc;
-};
-
-/*!
- * \brief Assign some memory for the Rx descriptors
- */
-static volatile struct
-emac_dma_descriptor __align64b rx_descriptor[EMAC_RX_NUM_DESCRIPTOR];
-
-/*!
- * \brief Assign some memory for the Tx descriptors
- */
-static volatile struct
-emac_dma_descriptor __align64b tx_descriptor[EMAC_TX_NUM_DESCRIPTOR];
-
-/*!
- * \brief Assign some memory for the Rx buffers
- * \n Note: The Rx buffers have to be 64 bit aligned otherwise
- *          very bad things happen.
- */
-static unsigned char __align64b
-    rx_buffer[EMAC_RX_NUM_DESCRIPTOR][EMAC_DESCRIPTOR_BUF_SIZE];
-
-/* Types ------------------------------------------------------------------- */
-
-/* Prototypes--------------------------------------------------------------- */
-
-/*!
- *
- * \brief Read a register in a phy connected to the emac management port.
- *
- * \param phy_id The phy id of the phy to access
- * \param register_number The register to read from
- * \return The value read
- *
- */
-static unsigned short emac_mii_read (unsigned int phy_id,
-				     unsigned int register_number);
-
-/*!
- *
- * \brief Write to a register in a phy connected to the emac management port.
- *
- * \param phy_id The phy id of the phy to access
- * \param register_number The register to write to
- * \param data The data to write
- *
- */
-static void emac_mii_write (unsigned int phy_id,
-			    unsigned int register_number, unsigned short data);
-
-#if defined (CONFIG_CMD_MII)
-static int emac_miiphy_read (char *devname,
-			     uchar addr, uchar reg, ushort * val);
-
-static int emac_miiphy_write (char *devname, uchar addr, uchar reg, ushort val);
-#endif /*CONFIG_CMD_MII */
-
-/*!
- *
- * \brief Initialise the emac mdio interface
- *
- */
-static void emac_init_mdio (void);
-
-/*!
- *
- * \brief Initialise the phy connected to the emac management port.
- *
- * \param dev Pointer to the eth_device structure
- *
- */
-static int emac_init_phy (struct eth_device *dev);
-
-/*!
- *
- * \brief Obtain the link status from the phy.
- *
- * \param dev Pointer to the eth_device structure
- *
- */
-static void emac_phy_get_link_status (struct eth_device *dev);
-
-/*!
- *
- * \brief Set up the MAC address in the emac.
- *
- * \param dev Pointer to the eth_device structure
- * \return Zero on success, non zero on error.
- *
- */
-static int emac_set_mac_addr (struct eth_device *dev);
-
-/*!
- *
- * \brief Initialise the emac registers.
- *
- * \param dev Pointer to the eth_device structure
- *
- */
-static void emac_startup (struct eth_device *dev);
-
-/*!
- *
- * \brief Initialise the emac buffer descriptors and phy.
- *
- * \param dev Pointer to the eth_device structure
- * \param bis Pointer to the board init structure
- * \return Zero on success, non zero on error
- *
- */
-static int emac_open (struct eth_device *dev, bd_t * bis);
-
-/*!
- *
- * \brief Receive a packet
- *
- * \param dev Pointer to the eth_device structure
- * \return Zero on success, non zero on error
- *
- */
-static int emac_rx_packet (struct eth_device *dev);
-
-/*!
- *
- * \brief Transmit a packet
- *
- * \param dev Pointer to the eth_device structure
- * \param packet Pointer to the packet data to transmit
- * \param length  Length (in bytes) of the packet to send
- * \return Zero on success, non zero on error
- *
- */
-static int emac_tx_packet (struct eth_device *dev,
-			   volatile void *packet, int length);
-
-/*!
- *
- * \brief Stop the emac
- *
- * \param dev Pointer to the eth_device structure
- *
- */
-static void emac_halt (struct eth_device *dev);
-
-/* Functions --------------------------------------------------------------- */
-
-static unsigned short emac_mii_read (unsigned int phy_id,
-				     unsigned int register_number)
-{
-	unsigned int write_data = 0x60020000;
-	unsigned int phy_management_idle = 0;
-	unsigned short value_read = 0;
-
-	/* Mask input parameters */
-	phy_id &= EMAC_PHY_ID_MASK;
-	register_number &= EMAC_PHY_REG_MASK;
-
-	write_data |= ((phy_id << EMAC_PHY_ID_SHIFT) |
-		       (register_number << EMAC_PHY_REG_SHIFT));
-
-	EMAC_WRITE (write_data, EMAC_PHY_MAINTAIN_REG_OFFSET);
-
-	/* Wait for the phy access to complete */
-	do {
-		phy_management_idle =
-		    EMAC_READ (EMAC_NETWORK_STATUS_REG_OFFSET);
-		phy_management_idle &= EMAC_PHY_MANAGEMENT_IDLE;
-	}
-	while (!phy_management_idle);
-
-	/* Read back the data obtained from the phy */
-	value_read = (unsigned short)EMAC_READ (EMAC_PHY_MAINTAIN_REG_OFFSET);
-	return (value_read);
-}
-
-static void emac_mii_write (unsigned int phy_id,
-			    unsigned int register_number, unsigned short data)
-{
-	unsigned int write_data = 0x50020000;
-	unsigned int phy_management_idle = 0;
-
-	/* Mask input parameters */
-	phy_id &= EMAC_PHY_ID_MASK;
-	register_number &= EMAC_PHY_REG_MASK;
-
-	write_data |= ((phy_id << EMAC_PHY_ID_SHIFT) |
-		       (register_number << EMAC_PHY_REG_SHIFT) | data);
-	EMAC_WRITE (write_data, EMAC_PHY_MAINTAIN_REG_OFFSET);
-
-	/* Wait for the phy access to complete */
-	do {
-		phy_management_idle =
-		    EMAC_READ (EMAC_NETWORK_STATUS_REG_OFFSET);
-		phy_management_idle &= EMAC_PHY_MANAGEMENT_IDLE;
-	}
-	while (!phy_management_idle);
-}
-
-#if defined (CONFIG_CMD_MII)
-static int emac_miiphy_read (char *devname, uchar addr, uchar reg, ushort * val)
-{
-	/* Make sure the mdio bus is initialised */
-	emac_init_mdio ();
-
-	/* Perform the mii bus read */
-	*val = emac_mii_read ((unsigned int)addr, (unsigned int)reg);
-	return 0;
-}
-
-static int emac_miiphy_write (char *devname, uchar addr, uchar reg, ushort val)
-{
-	/* Make sure the mdio bus is initialised */
-	emac_init_mdio ();
-
-	/* Perform the mdio bis write */
-	emac_mii_write ((unsigned int)addr, (unsigned int)reg,
-			(unsigned short)val);
-	return 0;
-}
-#endif /*CONFIG_CMD_MII */
-
-static void emac_init_mdio (void)
-{
-	unsigned int network_control_register = 0;
-	unsigned int network_config_register = 0;
-
-	/* Set phy management MDC Clock to 200 MHz (pclk) / 96 */
-	network_config_register = EMAC_READ (EMAC_NETWORK_CFG_REG_OFFSET);
-	network_config_register &= ~(EMAC_MDC_CLOCK_DIV_MASK);
-	network_config_register |= EMAC_MDC_CLOCK_DIV_96;
-	EMAC_WRITE (network_config_register, EMAC_NETWORK_CFG_REG_OFFSET);
-
-	/* Enable phy management */
-	network_control_register = EMAC_READ (EMAC_NETWORK_CTRL_REG_OFFSET);
-	network_control_register |= EMAC_MDIO_ENABLE;
-	EMAC_WRITE (network_control_register, EMAC_NETWORK_CTRL_REG_OFFSET);
-}
-
-static int emac_init_phy (struct eth_device *dev)
-{
-	struct emac_priv *priv = dev->priv;
-
-	unsigned int rev = picoxcell_get_revision ();
-
-	/* Setup the MDIO bus for Phy communications */
-	emac_init_mdio ();
-
-	/* If we are running on PC3x2 Rev D silicon and we are using a
-	 * Reduced MII (RMII) connected Ethernet Phy then we need the
-	 * link speed to be 100 mbps.
-	 */
-	if (picoxcell_is_pc3x2 () && (rev == PC3X2_REV_D)
-	    && picoxcell_is_rmii_enabled ()) {
-		/* Are we already set for 100 mpbs ? */
-		emac_phy_get_link_status (dev);
-		if (priv->speed == EMAC_PHY_SPEED_100) {
-			/* No need to do anything */
-		} else {
-			/* Setup the phy auto-negotiation advertisement register */
-			emac_mii_write (CONFIG_PHY_ADDR, MII_ADVERTISE,
-					PHY_AUTO_NEG_ADVERT_VALUE);
-
-			/* Re-start auto-negotiation */
-			emac_mii_write (CONFIG_PHY_ADDR, MII_BMCR,
-					(BMCR_ANENABLE | BMCR_ANRESTART));
-
-			/* Allow some time for the auto-negotiation process to start */
-			udelay (100);
-		}
-	}
-
-	/* Get the phy status */
-	emac_phy_get_link_status (dev);
-
-	if (priv->link == EMAC_PHY_LINK_DOWN) {
-		/* Oops, no valid link established, time to bail out */
-		printf ("%s: Link down !\n", dev->name);
-		return (-1);
-	} else {
-		/* We have a valid link established
-		 * so we can report the phy setup
-		 */
-		printf ("%s: Link up\n", dev->name);
-
-		if (priv->auto_negotiation == EMAC_PHY_AUTO_NEG_COMPLETE) {
-			printf ("%s: Auto-Negotiation complete\n", dev->name);
-		}
-
-		if (priv->speed == EMAC_PHY_SPEED_100) {
-			printf ("%s: 100Mbps\n", dev->name);
-		} else {
-			printf ("%s: 10Mbps\n", dev->name);
-		}
-
-		if (priv->duplex == EMAC_PHY_DUPLEX_FULL) {
-			printf ("%s: Full-duplex\n", dev->name);
-		} else {
-			printf ("%s: Half-duplex\n", dev->name);
-		}
-	}
-	return (0);
-}
-
-static void emac_phy_get_link_status (struct eth_device *dev)
-{
-	struct emac_priv *priv = dev->priv;
-	unsigned short phy_control = 0;
-	unsigned short phy_status = 0;
-	unsigned short ana = 0;
-	unsigned short anlpa = 0;
-	unsigned int timebase = 0;
-
-	/* Initialise the phy status parameters in the private data structure */
-	priv->auto_negotiation = ~(EMAC_PHY_AUTO_NEG_COMPLETE);
-	priv->link = EMAC_PHY_LINK_DOWN;
-	priv->speed = EMAC_PHY_SPEED_10;
-	priv->duplex = EMAC_PHY_DUPLEX_HALF;
-
-	/* Check to make sure the phy has auto-negotiation enabled */
-	phy_control = emac_mii_read (CONFIG_PHY_ADDR, MII_BMCR);
-	if (phy_control & BMCR_ANENABLE) {
-		/* Auto-negotiation is enabled
-		 * now need to check on auto-negotiation progress
-		 */
-		phy_status = emac_mii_read (CONFIG_PHY_ADDR, MII_BMSR);
-		if (phy_status & BMSR_ANEGCAPABLE) {
-			/* The phy is auto-negotiation capable */
-			timebase = get_timer (0);
-			do {
-				phy_status =
-				    emac_mii_read (CONFIG_PHY_ADDR, MII_BMSR);
-				if (phy_status & BMSR_ANEGCOMPLETE) {
-					/* Auto-negotiation has completed */
-					priv->auto_negotiation =
-					    EMAC_PHY_AUTO_NEG_COMPLETE;
-					break;
-				}
-			}
-			while (get_timer (timebase) < EMAC_PHY_TIMEOUT);
-
-			if (phy_status & BMSR_LSTATUS) {
-				/* We have a valid link established */
-				priv->link = EMAC_PHY_LINK_UP;
-			} else {
-				/* We do not have a valid link established */
-				priv->link = EMAC_PHY_LINK_DOWN;
-			}
-
-			/* Read the auto-negotiation advertisement register */
-			ana = emac_mii_read (CONFIG_PHY_ADDR, MII_ADVERTISE);
-
-			/* Read the auto-negotiation link partner ability register */
-			anlpa = emac_mii_read (CONFIG_PHY_ADDR, MII_LPA);
-
-			anlpa &= ana;
-
-			if (anlpa & (LPA_100FULL | LPA_100HALF)) {
-				priv->speed = EMAC_PHY_SPEED_100;
-
-				if (anlpa & LPA_100FULL) {
-					priv->duplex = EMAC_PHY_DUPLEX_FULL;
-				}
-			} else {
-				if (anlpa & LPA_10FULL) {
-					priv->duplex = EMAC_PHY_DUPLEX_FULL;
-				}
-			}
-		}
-	}
-
-	if (priv->auto_negotiation != EMAC_PHY_AUTO_NEG_COMPLETE) {
-		/* Auto-negotiation is not enabled or failed for some reason
-		 * so we just get phy setup from the status and control registers
-		 */
-		phy_control = emac_mii_read (CONFIG_PHY_ADDR, MII_BMCR);
-		phy_status = emac_mii_read (CONFIG_PHY_ADDR, MII_BMSR);
-		if (phy_status & BMSR_LSTATUS) {
-			priv->link = EMAC_PHY_LINK_UP;
-		} else {
-			priv->link = EMAC_PHY_LINK_DOWN;
-		}
-
-		if (phy_control & BMCR_SPEED100) {
-			priv->speed = EMAC_PHY_SPEED_100;
-		} else {
-			priv->speed = EMAC_PHY_SPEED_10;
-		}
-
-		if (phy_control & BMCR_FULLDPLX) {
-			priv->duplex = EMAC_PHY_DUPLEX_FULL;
-		} else {
-			priv->duplex = EMAC_PHY_DUPLEX_HALF;
-		}
-	}
-}
-
-static int emac_set_mac_addr (struct eth_device *dev)
-{
-	unsigned int mac_addr_bottom = 0;
-	unsigned int mac_addr_top = 0;
-
-	mac_addr_bottom = dev->enetaddr[0] |
-	    dev->enetaddr[1] << 8 |
-	    dev->enetaddr[2] << 16 | dev->enetaddr[3] << 24;
-
-	mac_addr_top = dev->enetaddr[4] | dev->enetaddr[5] << 8;
-
-	EMAC_WRITE (mac_addr_bottom, EMAC_SPEC_ADDR_1_BOT_31_0_REG_OFFSET);
-	EMAC_WRITE (mac_addr_top, EMAC_SPEC_ADDR_1_TOP_47_32_REG_OFFSET);
-
-	return 0;
-}
-
-static void emac_startup (struct eth_device *dev)
-{
-	struct emac_priv *priv = dev->priv;
-	unsigned int network_config_register = 0;
-	unsigned int network_control_register = 0;
-	unsigned int dma_config_register = 0;
-
-	/* Make sure the Tx & Rx are halted */
-	network_control_register = EMAC_READ (EMAC_NETWORK_CTRL_REG_OFFSET);
-	network_control_register &= ~(EMAC_RX_ENABLE | EMAC_TX_ENABLE);
-	EMAC_WRITE (network_control_register, EMAC_NETWORK_CTRL_REG_OFFSET);
-
-	/* Get the MAC address from environment variables
-	 *
-	 * Note: We do this again here just incase the MAC
-	 * address has been changed since U-Boot has started up
-	 */
-	eth_getenv_enetaddr ("ethaddr", dev->enetaddr);
-
-	/* Set the hardware MAC address
-	 *
-	 * Note: We do this again here just incase the MAC
-	 * address has been changed since U-Boot has started up
-	 */
-	(void)emac_set_mac_addr (dev);
-
-	/* Setup the Rx Buffer Queue Base Address */
-	EMAC_WRITE ((unsigned int)&rx_descriptor,
-		    EMAC_RX_BUFF_Q_BASE_ADDR_REG_OFFSET);
-
-	/* Setup the Tx Buffer Queue Base Address */
-	EMAC_WRITE ((unsigned int)&tx_descriptor,
-		    EMAC_TX_BUFF_Q_BASE_ADDR_REG_OFFSET);
-
-	/* Setup the size of the DMA Receive Buffer */
-	dma_config_register = EMAC_READ (EMAC_DMA_CFG_REG_OFFSET);
-	dma_config_register &= ~(EMAC_DMA_RX_BUFFER_SIZE_MASK);
-	dma_config_register |= EMAC_DMA_RX_BUFFER_SIZE;
-	EMAC_WRITE (dma_config_register, EMAC_DMA_CFG_REG_OFFSET);
-
-	/* Setup the Network Configuration Register */
-	network_config_register = EMAC_READ (EMAC_NETWORK_CFG_REG_OFFSET);
-	network_config_register |= EMAC_64_BIT_AMBA_DATA_BUS_WITDH;
-	network_config_register |= EMAC_LENGTH_FIELD_ERROR_FRAME_DISCARD;
-	network_config_register |= EMAC_FCS_REMOVE;
-
-	if (priv->duplex == EMAC_PHY_DUPLEX_FULL) {
-		network_config_register |= EMAC_FULL_DUPLEX;
-	} else {
-		network_config_register &= ~(EMAC_FULL_DUPLEX);
-	}
-
-	if (priv->speed == EMAC_PHY_SPEED_100) {
-		network_config_register |= EMAC_SPEED_100_MBPS;
-	} else {
-		network_config_register &= ~(EMAC_SPEED_100_MBPS);
-	}
-
-	EMAC_WRITE (network_config_register, EMAC_NETWORK_CFG_REG_OFFSET);
-
-	/* Setup the Network Control Register */
-	network_control_register = EMAC_READ (EMAC_NETWORK_CTRL_REG_OFFSET);
-	network_control_register |= (EMAC_RX_ENABLE | EMAC_TX_ENABLE);
-	EMAC_WRITE (network_control_register, EMAC_NETWORK_CTRL_REG_OFFSET);
-}
-
-static int emac_open (struct eth_device *dev, bd_t * bis)
-{
-	struct emac_priv *priv = dev->priv;
-	unsigned int i = 0;;
-	unsigned int buffer_address = 0;
-	unsigned int ret = 0;
-
-	/* Initialise the Rx descriptor count */
-	priv->rx_desc = 0;
-
-	/* Initialise the Tx descriptor count */
-	priv->tx_desc = 0;
-
-	/* Initialise the Rx descriptors */
-	for (i = 0; i < EMAC_RX_NUM_DESCRIPTOR; i++) {
-		buffer_address = (unsigned int)&rx_buffer[i][0];
-		if (i == (EMAC_RX_NUM_DESCRIPTOR - 1)) {
-			/* we are on the last descriptor entry */
-			buffer_address |= EMAC_RX_DESC_WRAP;
-		}
-		rx_descriptor[i].buffer = buffer_address;
-		rx_descriptor[i].status = 0;
-	}
-
-	/* Initialise the Tx descriptors */
-	for (i = 0; i < EMAC_TX_NUM_DESCRIPTOR; i++) {
-		tx_descriptor[i].buffer = 0;
-		tx_descriptor[i].status = EMAC_TX_DESC_HOST_OWN;
-
-		if (i == (EMAC_TX_NUM_DESCRIPTOR - 1)) {
-			/* we are on the last descriptor entry */
-			tx_descriptor[i].status |= EMAC_TX_DESC_WRAP;
-		}
-	}
-
-	/* Check out the phy status */
-	ret = emac_init_phy (dev);
-	if (ret != 0) {
-		/* Oops, we've had an error */
-		return (ret);
-	}
-
-	/* Initialise the emac registers */
-	emac_startup (dev);
-
-	return (0);
-}
-
-static int emac_rx_packet (struct eth_device *dev)
-{
-	struct emac_priv *priv = dev->priv;
-	unsigned int start_of_frame = 0;
-	unsigned int end_of_frame = 0;
-	unsigned int frame_error = 0;
-	unsigned int length = 0;
-	void *buffer_start;
-
-	if (rx_descriptor[priv->rx_desc].buffer & EMAC_RX_DESC_HOST_OWN) {
-		/* We have some received data */
-
-		/* Make sure we have a whole frame */
-		start_of_frame = rx_descriptor[priv->rx_desc].status &
-		    EMAC_RX_DESC_START_OF_FRAME;
-		end_of_frame = rx_descriptor[priv->rx_desc].status &
-		    EMAC_RX_DESC_END_OF_FRAME;
-		if (start_of_frame && end_of_frame) {
-			/* We have a complete frame */
-			length = rx_descriptor[priv->rx_desc].status &
-			    EMAC_RX_DESC_LENGTH_MASK;
-
-			/* Noodle the buffer start address for the higher level
-			 * network stack. The start address should be 8 byte aligned,
-			 * also bits 0 & 1 can be set by the emac, so these need to
-			 * be masked out as well
-			 */
-
-			buffer_start = (void *)
-			    (rx_descriptor[priv->rx_desc].buffer & 0xFFFFFFF8);
-
-			/* Send received packet to the higher network layers */
-			NetReceive (buffer_start, length);
-		} else {
-			/* Oops, not a complete frame */
-			frame_error++;
-		}
-
-		/* Reclaim the buffer just used */
-		rx_descriptor[priv->rx_desc].buffer &= ~(EMAC_RX_DESC_HOST_OWN);
-
-		/* Increment the Rx descriptor counter */
-		priv->rx_desc++;
-		if (priv->rx_desc == EMAC_RX_NUM_DESCRIPTOR) {
-			/* We have exhausted the supply of Rx descriptors */
-			priv->rx_desc = 0;
-		}
-	}
-
-	if (frame_error) {
-		printf ("frame error\n");
-		return (1);
-	}
-
-	return (0);
-}
-
-static int emac_tx_packet (struct eth_device *dev,
-			   volatile void *packet, int length)
-{
-	struct emac_priv *priv = dev->priv;
-	unsigned int i = 0;
-	unsigned int network_control_register = 0;
-
-	/* Set up the Tx descriptor */
-
-	/* Make sure the wrap bit is set for the last descriptor */
-	if (priv->tx_desc == (EMAC_TX_NUM_DESCRIPTOR - 1)) {
-		/* we are on the last descriptor entry */
-		tx_descriptor[priv->tx_desc].status = EMAC_TX_DESC_WRAP;
-	}
-
-	tx_descriptor[priv->tx_desc].status |=
-	    length & EMAC_TX_BUFFER_LENGTH_MASK;
-	tx_descriptor[priv->tx_desc].status |= EMAC_TX_LAST_BUFFER;
-	tx_descriptor[priv->tx_desc].status &= ~(EMAC_TX_NO_CRC_APPEND);
-	tx_descriptor[priv->tx_desc].status &= ~(EMAC_TX_DESC_HOST_OWN);
-
-	/* Setup the Tx descriptor buffer */
-	tx_descriptor[priv->tx_desc].buffer = (unsigned int)packet;
-
-	/* Start the packet transmission */
-	network_control_register = EMAC_READ (EMAC_NETWORK_CTRL_REG_OFFSET);
-	network_control_register |= EMAC_START_TX;
-	EMAC_WRITE (network_control_register, EMAC_NETWORK_CTRL_REG_OFFSET);
-
-	/* Wait for transmission to complete */
-	for (i = 0; i <= EMAC_TX_TIMEOUT; i++) {
-		if (tx_descriptor[priv->tx_desc].status & EMAC_TX_DESC_HOST_OWN) {
-			/* The emac has completed transmission */
-			break;
-		}
-		udelay (1);
-	}
-
-	/* Increment the Tx descriptor counter */
-	priv->tx_desc++;
-	if (priv->tx_desc == EMAC_TX_NUM_DESCRIPTOR) {
-		/* We have exhausted the supply of Tx descriptors */
-		priv->tx_desc = 0;
-	}
-
-	/* We could add some error reporting in here, but no one cares anyway */
-	return (0);
-}
-
-static void emac_halt (struct eth_device *dev)
-{
-	unsigned int status_register = 0;
-
-	/* Halt the Tx & Rx */
-	EMAC_WRITE (0, EMAC_NETWORK_CTRL_REG_OFFSET);
-
-	/* Clear the statistics counters */
-	EMAC_WRITE (EMAC_CLEAR_STATS_REGISTERS, EMAC_NETWORK_CTRL_REG_OFFSET);
-
-	/* Clear the Tx status registers */
-	status_register = EMAC_READ (EMAC_TX_STATUS_REG_OFFSET);
-	EMAC_WRITE (status_register, EMAC_TX_STATUS_REG_OFFSET);
-
-	/* Clear the Rx status registers */
-	status_register = EMAC_READ (EMAC_RX_STATUS_REG_OFFSET);
-	EMAC_WRITE (status_register, EMAC_RX_STATUS_REG_OFFSET);
-}
-
-int picoxcell_eth_register (bd_t * bis)
-{
-	struct eth_device *dev = NULL;
-	struct emac_priv *priv = NULL;
-
-	/* Create some storage for useful structures */
-	dev = (struct eth_device *)malloc (sizeof (*dev));
-	if (dev == NULL) {
-		/* Oops, no memory available */
-		return -ENOMEM;
-	}
-
-	priv = (struct emac_priv *)malloc (sizeof (*priv));
-	if (priv == NULL) {
-		/* Oops, no memory available */
-		free (dev);
-		return -ENOMEM;
-	}
-
-	dev->priv = priv;
-
-	/* Reset the private data */
-	memset (priv, 0, sizeof (struct emac_priv));
-
-	/* Define our name */
-	sprintf (dev->name, "emac");
-
-	dev->init = emac_open;
-	dev->recv = emac_rx_packet;
-	dev->send = emac_tx_packet;
-	dev->halt = emac_halt;
-	dev->write_hwaddr = emac_set_mac_addr;
-
-	/* Register our emac driver with the networking environment */
-	(void)eth_register (dev);
-
-	/* Get the MAC address from environment variables */
-	eth_getenv_enetaddr ("ethaddr", dev->enetaddr);
-
-	/* Set the hardware MAC address */
-	(void)emac_set_mac_addr (dev);
-
-#if defined (CONFIG_CMD_MII)
-	miiphy_register (dev->name, emac_miiphy_read, emac_miiphy_write);
-#endif
-
-	return 0;
-}
-
-#endif /* CONFIG_DW_EMAC */
diff --git a/arch/arm/include/asm/arch-picoxcell/clk.h b/arch/arm/include/asm/arch-picoxcell/clk.h
new file mode 100644
index 0000000..8b472ce
--- /dev/null
+++ b/arch/arm/include/asm/arch-picoxcell/clk.h
@@ -0,0 +1,27 @@
+/*****************************************************************************
+ * $picoChipHeaderSubst$
+ *****************************************************************************/
+
+/*!
+* \file clk.h
+* \brief Definitions for the picoxcell clock related functions
+*
+* Copyright (c) 2006-2011 Picochip Ltd
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License version 2 as
+* published by the Free Software Foundation.
+*
+* All enquiries to support@picochip.com
+*/
+#include <common.h>
+
+#ifndef __PICOXCELL_CLK_H__
+#define __PICOXCELL_CLK_H__
+
+static inline unsigned long get_macb_pclk_rate(unsigned int dev_id)
+{
+	return PICOXCELL_AHB_CLOCK_FREQ;
+}
+
+#endif /* __PICOXCELL_CLK_H__ */
diff --git a/arch/arm/include/asm/arch-picoxcell/emac.h b/arch/arm/include/asm/arch-picoxcell/emac.h
deleted file mode 100644
index a441dab..0000000
--- a/arch/arm/include/asm/arch-picoxcell/emac.h
+++ /dev/null
@@ -1,189 +0,0 @@
-/*****************************************************************************
- * $picoChipHeaderSubst$
- *****************************************************************************/
-
-/*!
-* \file emac.h
-* \brief Definitions for the picoxcell emac block.
-*
-* Copyright (c) 2006-2011 Picochip Ltd
-*
-* This program is free software; you can redistribute it and/or modify
-* it under the terms of the GNU General Public License version 2 as
-* published by the Free Software Foundation.
-*
-* All enquiries to support@picochip.com
-*/
-
-#ifndef __PICOXCELL_EMAC_H__
-#define __PICOXCELL_EMAC_H__
-
-/* Constant-s -------------------------------------------------------------- */
-
-/*****************************************************************************/
-/* Register Offset Addresses                                                 */
-/*****************************************************************************/
-
-#define EMAC_NETWORK_CTRL_REG_OFFSET                                (0x0000)
-#define EMAC_NETWORK_CFG_REG_OFFSET                                 (0x0004)
-#define EMAC_NETWORK_STATUS_REG_OFFSET                              (0x0008)
-#define EMAC_USER_IO_REG_OFFSET                                     (0x000C)
-#define EMAC_DMA_CFG_REG_OFFSET                                     (0x0010)
-#define EMAC_TX_STATUS_REG_OFFSET                                   (0x0014)
-#define EMAC_RX_BUFF_Q_BASE_ADDR_REG_OFFSET                         (0x0018)
-#define EMAC_TX_BUFF_Q_BASE_ADDR_REG_OFFSET                         (0x001C)
-#define EMAC_RX_STATUS_REG_OFFSET                                   (0x0020)
-#define EMAC_INT_STATUS_REG_OFFSET                                  (0x0024)
-#define EMAC_INT_ENABLE_REG_OFFSET                                  (0x0028)
-#define EMAC_INT_DISABLE_REG_OFFSET                                 (0x002C)
-#define EMAC_INT_MASK_REG_OFFSET                                    (0x0030)
-#define EMAC_PHY_MAINTAIN_REG_OFFSET                                (0x0034)
-#define EMAC_RX_PAUSE_QUANTUM_REG_OFFSET                            (0x0038)
-#define EMAC_TX_PAUSE_QUATNUM_REG_OFFSET                            (0x003C)
-#define EMAC_HASH_BOT_32_0_REG_OFFSET                               (0x0080)
-#define EMAC_HASH_TOP_63_32_REG_OFFSET                              (0x0084)
-#define EMAC_SPEC_ADDR_1_BOT_31_0_REG_OFFSET                        (0x0088)
-#define EMAC_SPEC_ADDR_1_TOP_47_32_REG_OFFSET                       (0x008C)
-#define EMAC_SPEC_ADDR_2_BOT_31_0_REG_OFFSET                        (0x0090)
-#define EMAC_SPEC_ADDR_2_TOP_47_32_REG_OFFSET                       (0x0094)
-#define EMAC_SPEC_ADDR_3_BOT_31_0_REG_OFFSET                        (0x0098)
-#define EMAC_SPEC_ADDR_3_TOP_47_32_REG_OFFSET                       (0x009C)
-#define EMAC_SPEC_ADDR_4_BOT_31_0_REG_OFFSET                        (0x00A0)
-#define EMAC_SPEC_ADDR_4_TOP_47_32_REG_OFFSET                       (0x00A4)
-#define EMAC_TYPE_ID_MATCH_1_REG_OFFSET                             (0x00A8)
-#define EMAC_TYPE_ID_MATCH_2_REG_OFFSET                             (0x00AC)
-#define EMAC_TYPE_ID_MATCH_3_REG_OFFSET                             (0x00B0)
-#define EMAC_TYPE_ID_MATCH_4_REG_OFFSET                             (0x00B4)
-#define EMAC_WOL_REG_OFFSET                                         (0x00B8)
-#define EMAC_IPG_STRETCH_REG_OFFSET                                 (0x00BC)
-#define EMAC_STACKED_VLAN_REG_OFFSET                                (0x00C0)
-
-#define EMAC_MODULE_ID_REG_OFFSET                                   (0x00FC)
-
-#define EMAC_OCTETS_TX_31_0_REG_OFFSET                              (0x0100)
-#define EMAC_OCTETS_TX_47_32_REG_OFFSET                             (0x0104)
-#define EMAC_FRAMES_TX_NO_ERROR_REG_OFFSET                          (0x0108)
-#define EMAC_BROADCAST_FRAMES_TX_NO_ERROR_REG_OFFSET                (0x010C)
-#define EMAC_MULTICAST_FRAMES_TX_NO_ERROR_REG_OFFSET                (0x0110)
-#define EMAC_TX_PAUSE_FRAMES_REG_OFFSET                             (0x0114)
-#define EMAC_64_BYTE_FRAMES_TX_NO_ERROR_REG_OFFSET                  (0x0118)
-#define EMAC_65_127_BYTE_FRAMES_TX_NO_ERROR_REG_OFFSET              (0x011C)
-#define EMAC_128_255_BYTE_FRAMES_TX_NO_ERROR_REG_OFFSET             (0x0120)
-#define EMAC_256_511_BYTE_FRAMES_TX_NO_ERROR_REG_OFFSET             (0x0124)
-#define EMAC_512_1023_BYTE_FRAMES_TX_NO_ERROR_REG_OFFSET            (0x0128)
-#define EMAC_1024_1518_BYTE_FRAMES_TX_NO_ERROR_REG_OFFSET           (0x012C)
-#define EMAC_GREATER_THAN_1518_BYTE_FRAMES_TX_NO_ERROR_REG_OFFSET   (0x0130)
-#define EMAC_TX_UNDER_RUN_ERROR_REG_OFFSET                          (0x0134)
-#define EMAC_SINGLE_COLLISION_FRAMES_REG_OFFSET                     (0x0138)
-#define EMAC_MULTIPLE_COLLISION_FRAMES_REG_OFFSET                   (0x013C)
-#define EMAC_EXCESSIVE_COLLISIONS_REG_OFFSET                        (0x0140)
-#define EMAC_LATE_COLLISIONS_REG_OFFSET                             (0x0144)
-#define EMAC_DEFFERED_TX_FRAMES_REG_OFFSET                          (0x0148)
-#define EMAC_CARRIER_SENSE_ERRORS_REG_OFFSET                        (0x014C)
-#define EMAC_OCTETS_RX_31_0_NO_ERROR_REG_OFFSET                     (0x0150)
-#define EMAC_OCTETS_RX_47_32_NO_ERROR_REG_OFFSET                    (0x0154)
-#define EMAC_FRAMES_RX_NO_ERROR_REG_OFFSET                          (0x0158)
-#define EMAC_BROADCAST_FRAMES_RX_NO_ERROR_REG_OFFSET                (0x015C)
-#define EMAC_MULTICAST_FRAMES_RX_NO_ERROR_REG_OFFSET                (0x0160)
-#define EMAC_PAUSE_FRAME_RX_REG_OFFSET                              (0x0164)
-#define EMAC_64_BYTE_FRAMES_RX_NO_ERROR_REG_OFFSET                  (0x0168)
-#define EMAC_65_127_BYTE_FRAMES_RX_NO_ERROR_REG_OFFSET              (0x016C)
-#define EMAC_128_255_BYTE_FRAMES_RX_NO_ERROR_REG_OFFSET             (0x0170)
-#define EMAC_256_511_BYTE_FRAMES_RX_NO_ERROR_REG_OFFSET             (0x0174)
-#define EMAC_512_1023_BYTE_FRAMES_RX_NO_ERROR_REG_OFFSET            (0x0178)
-#define EMAC_1024_1518_BYTE_FRAMES_RX_NO_ERROR_REG_OFFSET           (0x017C)
-#define EMAC_1519_TO_MAX_FRAMES_RX_NO_ERROR_REG_OFFSET              (0x0180)
-#define EMAC_UNDERSIZE_FRAMES_RX_REG_OFFSET                         (0x0184)
-#define EMAC_OVERSIZE_FRAMES_RX_REG_OFFSET                          (0x0188)
-#define EMAC_JABBER_FRAMES_RX_REG_OFFSET                            (0x018C)
-#define EMAC_FCS_ERRORS_REG_OFFSET                                  (0x0190)
-#define EMAC_LENGTH_FIELD_FRAME_ERRORS_REG_OFFSET                   (0x0194)
-#define EMAC_RX_SYMBOL_ERRORS_REG_OFFSET                            (0x0198)
-#define EMAC_ALLIGNMENT_ERRORS_REG_OFFSET                           (0x019C)
-#define EMAC_RX_RESOURCE_ERRORS_REG_OFFSET                          (0x01A0)
-#define EMAC_RX_OVERRUN_ERRORS_REG_OFFSET                           (0x01A4)
-#define EMAC_IP_HDR_CHECKSUM_ERRORS_REG_OFFSET                      (0x01A8)
-#define EMAC_TCP_CHECKSUM_ERRORS_REG_OFFSET                         (0x01AC)
-#define EMAC_UDP_CHECKSUM_ERRORS_REG_OFFSET                         (0x01B0)
-
-#define EMAC_1588_TIMERS_SECONDS_REG_OFFSET                         (0x01D0)
-#define EMAC_1588_TIMER_NANO_SECONDS_REG_OFFSET                     (0x01D4)
-#define EMAC_1588_TIMER_ADJUST_REG_OFFSET                           (0x01D8)
-#define EMAC_1588_TIMER_INCREMENT_REG_OFFSET                        (0x01DC)
-
-#define EMAC_PTP_EVENT_FRAME_TX_SECONDS_REG_OFFSET                  (0x01E0)
-#define EMAC_PTP_EVENT_FRAME_TX_NANO_SECONDS_REG_OFFSET             (0x01E4)
-#define EMAC_PTP_EVENT_FRAME_RX_SECONDS_REG_OFFSET                  (0x01E8)
-#define EMAC_PTP_EVENT_FRAME_RX_NANO_SECONDS_REG_OFFSET             (0x01EC)
-#define EMAC_PTP_PEER_EVENT_FRAME_TX_SECONDS_REG_OFFSET             (0x01F0)
-#define EMAC_PTP_PEER_EVENT_FRAME_TX_NANO_SECONDS_REG_OFFSET        (0x01F4)
-#define EMAC_PTP_PEER_EVENT_FRAME_RX_SECONDS_REG_OFFSET             (0x01F8)
-#define EMAC_PTP_PEER_EVENT_FRAME_RX_NANO_SECONDS_REG_OFFSET        (0x01FC)
-
-#define EMAC_PCS_CTRL_REG_OFFSET                                    (0x0200)
-#define EMAC_PCS_STATUS_REG_OFFSET                                  (0x0204)
-#define EMAC_PCS_UPPER_PHY_ID_REG_OFFSET                            (0x0208)
-#define EMAC_PCS_LOWER_PHY_ID_REG_OFFSET                            (0x020C)
-#define EMAC_PCS_AUTO_NEG_ADVERT_REG_OFFSET                         (0x0210)
-#define EMAC_PCS_AUTO_NEG_LINK_PARTNER_AB_REG_OFFSET                (0x0214)
-#define EMAC_PCS_AUTO_NEG_EXPANSION_REG_OFFSET                      (0x0218)
-#define EMAC_PCS_AUTO_NEG_NEXT_PAGE_REG_OFFSET                      (0x021C)
-#define EMAC_PCS_AUTO_NEG_LINK_PARTNER_NEXT_PAGE_REG_OFFSET         (0x0220)
-#define EMAC_PCS_EXTENDED_STATUS_REG_OFFSET                         (0x023C)
-
-/* EMAC_NETWORK_CTRL_REG_OFFSET bits */
-#define EMAC_TRANSMIT_HALT                                          (((unsigned int)1) << 10)
-#define EMAC_START_TX                                               (((unsigned int)1) << 9)
-#define EMAC_CLEAR_STATS_REGISTERS                                  (((unsigned int)1) << 5)
-#define EMAC_MDIO_ENABLE                                            (((unsigned int)1) << 4)
-#define EMAC_TX_ENABLE                                              (((unsigned int)1) << 3)
-#define EMAC_RX_ENABLE                                              (((unsigned int)1) << 2)
-
-/* EMAC_NETWORK_CFG_REG_OFFSET bits */
-#define EMAC_64_BIT_AMBA_DATA_BUS_WITDH                             (((unsigned int)1) << 21)
-#define EMAC_MDC_CLOCK_DIV_MASK                                     (0x7 << 18)
-#define EMAC_MDC_CLOCK_DIV_96                                       (0x5 << 18)
-#define EMAC_FCS_REMOVE                                             (((unsigned int)1) << 17)
-#define EMAC_LENGTH_FIELD_ERROR_FRAME_DISCARD                       (((unsigned int)1) << 16)
-#define EMAC_FULL_DUPLEX                                            (((unsigned int)1) << 1)
-#define EMAC_SPEED_100_MBPS                                         (((unsigned int)1) << 0)
-
-/* EMAC_NETWORK_STATUS_REG_OFFSET bits */
-#define EMAC_PHY_MANAGEMENT_IDLE                                    (((unsigned int)1) << 2)
-
-/* EMAC_DMA_CFG_REG_OFFSET bits */
-#define EMAC_DMA_RX_BUFFER_SIZE_IDX                                 (16)
-#define EMAC_DMA_RX_BUFFER_SIZE_MASK                                (0xFF << EMAC_DMA_RX_BUFFER_SIZE_IDX)
-#define EMAC_DMA_RX_BUFFER_SIZE                                     (0x18 << EMAC_DMA_RX_BUFFER_SIZE_IDX)
-
-/* EMAC_PHY_MAINTAIN_REG_OFFSET bits */
-#define EMAC_PHY_ID_MASK                                            (0x1F)
-#define EMAC_PHY_ID_SHIFT                                           (23)
-#define EMAC_PHY_REG_MASK                                           (0x1F)
-#define EMAC_PHY_REG_SHIFT                                          (18)
-#define EMAC_PHY_DATA_MASK                                          (0xFFFF)
-
-/* EMAC_TX_STATUS_REG_OFFSET bits */
-#define EMAC_TRANSMIT_COMPLETE                                      (((unsigned int)1) << 5)
-#define EMAC_TRANSMIT_GO                                            (((unsigned int)1) << 3)
-
-/* Rx Descriptor Bits */
-#define EMAC_RX_DESC_WRAP                                           (((unsigned int)1) << 1)
-#define EMAC_RX_DESC_HOST_OWN                                       (((unsigned int)1) << 0)
-
-#define EMAC_RX_DESC_END_OF_FRAME                                   (((unsigned int)1) << 15)
-#define EMAC_RX_DESC_START_OF_FRAME                                 (((unsigned int)1) << 14)
-#define EMAC_RX_DESC_LENGTH_MASK                                    (0x1FFF)
-
-/* Tx Descriptor Bits */
-#define EMAC_TX_DESC_HOST_OWN                                       (((unsigned int)1) << 31)
-#define EMAC_TX_DESC_WRAP                                           (((unsigned int)1) << 30)
-#define EMAC_TX_RETRY_ERROR                                         (((unsigned int)1) << 29)
-#define EMAC_TX_UNDERRUN_ERROR                                      (((unsigned int)1) << 28)
-#define EMAC_TX_FRAME_CORRUPTION_ERROR                              (((unsigned int)1) << 27)
-#define EMAC_TX_LATE_COLLISION_ERROR                                (((unsigned int)1) << 26)
-#define EMAC_TX_NO_CRC_APPEND                                       (((unsigned int)1) << 16)
-#define EMAC_TX_LAST_BUFFER                                         (((unsigned int)1) << 15)
-#define EMAC_TX_BUFFER_LENGTH_MASK                                  (0x3FFF)
-
-#endif /* __PICOXCELL_EMAC_H__ */
diff --git a/include/configs/picochippc7302-common.h b/include/configs/picochippc7302-common.h
index e5d0de7..437cc9b 100644
--- a/include/configs/picochippc7302-common.h
+++ b/include/configs/picochippc7302-common.h
@@ -155,7 +155,7 @@
 /*-----------------------------------------------------------------------------
  * Ethernet Stuff
  */
-#define CONFIG_DW_EMAC
+#define CONFIG_MACB
 #define CONFIG_PHY_ADDR         (1)
 #define CONFIG_NET_MULTI
 
@@ -279,7 +279,7 @@
  * Environment Configuration
  */
 
-#if defined(CONFIG_DW_EMAC)
+#if defined(CONFIG_MACB)
 
 /* Picochip OUI
  *
@@ -304,7 +304,7 @@
 /* Enable the MII utility commands */
 #undef CONFIG_CMD_MII
 
-#endif /* CONFIG_DW_EMAC */
+#endif /* CONFIG_MACB */
 
 /* This is the address in NOR Flash where the Linux kernel
  * can be found.
diff --git a/include/configs/picochippc7308.h b/include/configs/picochippc7308.h
index 3cb9606..b54490e 100644
--- a/include/configs/picochippc7308.h
+++ b/include/configs/picochippc7308.h
@@ -205,7 +205,7 @@
 /*-----------------------------------------------------------------------------
  * Ethernet Stuff
  */
-#define CONFIG_DW_EMAC
+#define CONFIG_MACB
 #define CONFIG_PHY_ADDR         (1)
 #define CONFIG_NET_MULTI
 
@@ -361,7 +361,7 @@
  * Environment Configuration
  */
 
-#if defined(CONFIG_DW_EMAC)
+#if defined(CONFIG_MACB)
 
 /* Picochip OUI
  *
@@ -386,7 +386,7 @@
 /* Enable the MII utility commands */
 #undef CONFIG_CMD_MII
 
-#endif /* CONFIG_DW_EMAC */
+#endif /* CONFIG_MACB */
 
 /* This is the offset from the start of NAND Flash
  * to where the Linux kernel can be found.
diff --git a/include/netdev.h b/include/netdev.h
index 2818749..4724717 100644
--- a/include/netdev.h
+++ b/include/netdev.h
@@ -104,7 +104,6 @@ int xilinx_emaclite_initialize(bd_t *bis, unsigned long base_addr,
 							int txpp, int rxpp);
 int xilinx_ll_temac_eth_init(bd_t *bis, unsigned long base_addr, int flags,
 						unsigned long ctrl_addr);
-int picoxcell_eth_register(bd_t *bis);
 
 /*
  * As long as the Xilinx xps_ll_temac ethernet driver has not its own interface
-- 
1.7.0.4

