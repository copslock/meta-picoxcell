From 396e36f885675bf3d2dc08aee120c0ae9686cfeb Mon Sep 17 00:00:00 2001
From: Dave Aldridge <david.aldridge@picochip.com>
Date: Fri, 6 May 2011 11:25:38 +0100
Subject: [PATCH 10/70] picoxcell: spi driver improvement

The picoxcell spi driver has been modified to work with the
higher levels of spi software. This means that the higher levels of spi
code no longer need to be modified to work on our platforms.
---
 arch/arm/cpu/arm926ejs/picoxcell/spi.c |  246 ++++++++++----------------------
 1 files changed, 75 insertions(+), 171 deletions(-)

diff --git a/arch/arm/cpu/arm926ejs/picoxcell/spi.c b/arch/arm/cpu/arm926ejs/picoxcell/spi.c
index b3c8ff2..691ac11 100644
--- a/arch/arm/cpu/arm926ejs/picoxcell/spi.c
+++ b/arch/arm/cpu/arm926ejs/picoxcell/spi.c
@@ -20,22 +20,11 @@
 
 #ifdef CONFIG_DW_SPI
 
-/* Define this to use a GPIO as the spi flash chip select.
-   Note: On the PC7302 platform we only have a single spi flash device.
-   Note: If this is not defined then we use the chip select generated by the
-         SPI block.
-   Note: Using this option on a PC7302 platform will require a board
-         modification.
-*/
-#undef USE_GPIO_AS_CHIP_SELECT
-
 #include <spi.h>
 #include <malloc.h>
-#include <asm/io.h>
 #include <asm/arch/picoxcell.h>
 #include <asm/arch/spi.h>
 #include <asm/arch/axi2cfg.h>
-#include <asm/arch/gpio.h>
 
 /* Macros ------------------------------------------------------------------ */
 /*!
@@ -47,7 +36,7 @@
 #define spi_debug(fmt,args...)
 #endif /* SPI_DEBUG */
 
-/* !
+/*!
  *  \brief Macros used to read from, and write to, the spi registers.
  *         Note: These macros provide 16 bit access.
  */
@@ -57,7 +46,7 @@
 #define SPI_WRITE(__value, __offset) \
                    *((volatile u16*)(PICOXCELL_SSI_BASE + __offset)) = __value
 
-/* !
+/*!
  *  \brief Macros used to read from, and write to, the axi2cfg registers.
  *         Note: These macros provide 32 bit access.
  */
@@ -68,7 +57,7 @@
                    *((volatile u32*)(PICOXCELL_AXI2CFG_BASE + __offset)) = __value
 
 /* Constants --------------------------------------------------------------- */
-/* !
+/*!
  *  \brief This structure is used for generic and device specific
  *         spi driver data.
  */
@@ -123,7 +112,7 @@ struct spi_slave *spi_setup_slave (unsigned int bus,
 	/* Have we been passed a valid combination of bus and cs ?
 	 * Note: Picoxcell devices have a single SPI controller (bus) and
 	 *       up to 4 possible SPI chip selects.
-         */
+	 */
 	if (bus > (PICOXCELL_MAX_NUMBER_SPI_BUSSES - 1)) {
 		/* Oops, request bus is out of range. */
 		printf ("Oops, SPI 'bus' out of range. "
@@ -153,16 +142,7 @@ struct spi_slave *spi_setup_slave (unsigned int bus,
 			spi_max_clock);
 		return NULL;
 	}
-#ifdef USE_GPIO_AS_CHIP_SELECT
-	/* Have we been passed a valid SPI mode ? */
-	if ((mode < SPI_MODE_0) || (mode > SPI_MODE_3)) {
-		/* Oops, we only support spi mode 0 - 3 */
-		printf ("Oops, SPI 'mode' out of range. "
-			"(We only support SPI 'mode' %d to %d).\n",
-			(unsigned int)SPI_MODE_0, (unsigned int)SPI_MODE_3);
-		return NULL;
-	}
-#else
+
 	/* Have we been passed a valid SPI mode ? */
 	if (mode != SPI_MODE_3) {
 		/* Oops, we only support spi mode 3 */
@@ -171,7 +151,6 @@ struct spi_slave *spi_setup_slave (unsigned int bus,
 			(unsigned int)SPI_MODE_3);
 		return NULL;
 	}
-#endif
 
 	/* Grab some memory for the SPI data structure */
 	spi_slave = malloc (sizeof (struct picoxcell_spi_slave));
@@ -210,17 +189,6 @@ struct spi_slave *spi_setup_slave (unsigned int bus,
 		break;
 	}
 
-#ifdef USE_GPIO_AS_CHIP_SELECT
-	/* Set up ARM gpio #2 for cs driving */
-	/* Negate the 'cs' in the data register */
-	*(unsigned int *)(PICOXCELL_GPIO_BASE + GPIO_SW_PORT_A_DR_REG_OFFSET) |=
-	    GPIO_BIT_2;
-
-	/* Set up the gpio as an o/p */
-	*(unsigned int *)(PICOXCELL_GPIO_BASE +
-			  GPIO_SW_PORT_A_DDR_REG_OFFSET) |= GPIO_BIT_2;
-#endif
-
 	return &spi_slave->slave;
 }
 
@@ -251,13 +219,15 @@ int spi_claim_bus (struct spi_slave *slave)
 	spi_slave = container_of (slave, struct picoxcell_spi_slave, slave);
 
 	/* Disable SPI operations
-	   Note: We can't program up the block registers unless
-	   the block is disabled  */
+	 * Note: We can't program up the block registers unless
+	 *       the block is disabled
+	 */
 	SPI_WRITE (PICOXCELL_SPI_DISABLE, SSI_ENABLE_REG_REG_OFFSET);
 
-	/* Program up some bits Control Register 0.
-	   Note: As TMOD bits set to 00 (Transmit & Receive),
-	   we do not need to worry about the ctrlr1 register */
+	/* Program up some bits in Control Register 0.
+	 * Note: As TMOD bits set to 00 (Transmit & Receive),
+	 *       we do not need to worry about the ctrlr1 register
+	 */
 	ctrlr0 = PICOXCELL_SPI_DATA_FRM_8_BIT;
 
 	if (spi_slave->scph) {
@@ -302,12 +272,18 @@ int spi_xfer (struct spi_slave *slave,
 	unsigned int len_tx = 0;
 	unsigned int len_rx = 0;
 	unsigned int byte_count = 0;
+	unsigned int byte_count_tx = 0;
+	unsigned int byte_count_rx = 0;
+	unsigned int byte_count_tx_more = 0;
+	unsigned int total_loop_count = 0;
+	unsigned int total_tx_count = 0;
 
 	u16 status;
 
 	const u8 *txp = dout;
 	u8 *rxp = din;
 	u8 value;
+	u8 *dout_copy = NULL;
 
 	spi_debug ("spi_xfer: bitlen = %d, dout = %p, din = %p, flags = %d\n",
 		   bitlen, dout, din, flags);
@@ -327,8 +303,7 @@ int spi_xfer (struct spi_slave *slave,
 		goto out;
 	}
 
-	/*
-	 * The SPI controller can do non-multiple-of-8 bit
+	/* The SPI controller can do non-multiple-of-8 bit
 	 * transfers, but this driver currently doesn't support it.
 	 */
 	if (bitlen % 8) {
@@ -340,81 +315,18 @@ int spi_xfer (struct spi_slave *slave,
 	/* Number of bytes to transfer */
 	byte_count = bitlen / 8;
 
-#ifdef USE_GPIO_AS_CHIP_SELECT
-	/* Ok, we are using a chip select generated by a gpio signal */
-
-	if (flags & SPI_XFER_BEGIN) {
-		/* Assert the required chip SPI slave chip select */
-		spi_cs_activate (slave);
-
-		/* Enable SPI operations */
-		SPI_WRITE (PICOXCELL_SPI_ENABLE, SSI_ENABLE_REG_REG_OFFSET);
-	}
-
-	/* Start the data transfer */
-	for (len_tx = 0, len_rx = 0; len_rx < byte_count;) {
-		status = SPI_READ (SSI_STATUS_REG_OFFSET);
-
-		if (len_tx < byte_count && (status & PICOXCELL_SPI_STATUS_TFNF)) {
-			/* We have room in the Tx fifo */
-			if (txp)
-				value = *txp++;
-			else
-				value = 0;
-
-			SPI_WRITE (value, SSI_DATA_REG_OFFSET);
-			len_tx++;
-		}
-
-		if (status & PICOXCELL_SPI_STATUS_RFNE) {
-			/* We have some data in the receive fifo */
-			value = (u8) SPI_READ (SSI_DATA_REG_OFFSET);
-			if (rxp)
-				*rxp++ = value;
-			len_rx++;
-		}
-	}
-
-out:
-	if (flags & SPI_XFER_END) {
-		/*
-		 * Wait until the transfer is completely done before
-		 * we deactivate CS.
-		 */
-		do {
-			status = SPI_READ (SSI_STATUS_REG_OFFSET);
-			status &= PICOXCELL_SPI_STATUS_BUSY;
-
-		} while (status);
-
-		spi_cs_deactivate (slave);
-	}
-
-	return SUCCESS;
-}
-#else /* USE_GPIO_AS_CHIP_SELECT */
-
 	/* Using the SPI block to control the chip selects,
-	   therefore we need all transactions before we start anything.
-
-	   Note: It is imperative that the Tx fifo never empties during operation,
-	   if this happens the cs will be negated by the SPI block,
-	   the spi flash will 'forget' what it is doing and it will
-	   all end in tears ! */
-
-	u8 *dout_copy = NULL;
-	unsigned int byte_count_tx = 0;
-	unsigned int byte_count_rx = 0;
-	unsigned int byte_count_tx_more = 0;
-	unsigned int total_loop_count = 0;
-	unsigned int total_tx_count = 0;
-
+	 * therefore we need all transactions (SPI_XFER_BEGIN and
+	 * SPI_XFER_END) before we actually start anything.
+	 *
+	 * Note: It is imperative that the Tx fifo never empties during
+	 *       operation, if this happens the cs will be negated by the
+	 *       SPI block, the spi flash will 'forget' what it is doing
+	 *       and it will all end in tears !
+	 */
 	if (flags & SPI_XFER_BEGIN) {
 		/* If necessary take a copy of the data to transmit */
 		if (txp) {
-			/* Ok, we have some data to Tx */
-
-			/* Grab some memory */
 			dout_copy = malloc (byte_count);
 			if (!dout_copy) {
 				/* Oops, we have a memory management problem */
@@ -433,12 +345,13 @@ out:
 			spi_slave->byte_count_tx = byte_count;
 
 			/* We have a copy of the data so can null the
-			   tx data pointer */
+			 * tx data pointer
+			 */
 			txp = NULL;
 		}
 	}
 
-	if (flags & SPI_XFER_END) {
+	if ((flags & SPI_XFER_END) || (flags == 0)) {
 		/* Go retrieve the saved data */
 		dout_copy = spi_slave->dout_copy;
 		byte_count_tx = spi_slave->byte_count_tx;
@@ -471,7 +384,9 @@ out:
 		/* Enable SPI block operations */
 		SPI_WRITE (PICOXCELL_SPI_ENABLE, SSI_ENABLE_REG_REG_OFFSET);
 
-		/* Set up some variables to avoid calculating them during the loop */
+		/* Set up some variables to avoid calculating them
+		 * during the loop
+		 */
 		total_loop_count =
 		    byte_count_rx + byte_count_tx + byte_count_tx_more;
 		total_tx_count = byte_count_tx + byte_count_tx_more;
@@ -488,9 +403,11 @@ out:
 			status = SPI_READ (SSI_STATUS_REG_OFFSET);
 
 			while (len_tx < byte_count_tx) {
-				/* The Tx fifo is 16 entries deep, we should never fill
-				   this up sending a 'command' to the flash.  Therefore
-				   we do not check the tx fifo status */
+				/* The Tx fifo is 16 entries deep,
+				 * we should never fill this up sending a
+				 * 'command' to the flash. Therefore
+				 * we do not check the tx fifo status
+				 */
 				SPI_WRITE (*dout_copy++, SSI_DATA_REG_OFFSET);
 				len_tx++;
 			}
@@ -501,30 +418,37 @@ out:
 				SPI_WRITE (*txp++, SSI_DATA_REG_OFFSET);
 				len_tx++;
 
-				/* We may fill the tx fifo now, so a re-read of
-				   the status register is a good idea */
+				/* We may fill the tx fifo now, so a re-read
+				 * of the status register is a good idea
+				 */
 				status = SPI_READ (SSI_STATUS_REG_OFFSET);
 			}
 
 			if ((len_tx >= total_tx_count) && (byte_count_rx == 0)) {
-				/* We have finished Tx and we are not interested in Rx,
-				   lets get out of here */
+				/* We have finished Tx and we are not
+				 * interested in Rx, lets get out of here
+				 */
 				break;
 			}
 
 			if ((len_tx >= total_tx_count) && (byte_count_rx != 0)) {
-				/* Still trying to read some data, so keep the Tx fifo
-				   tickling along, we don't care if the Tx fifo is
-				   full or overflows */
+				/* Still trying to read some data, so keep the
+				 * Tx fifo tickling along, we don't care if
+				 * the Tx fifo is full or overflows
+				 */
 				SPI_WRITE (0, SSI_DATA_REG_OFFSET);
 			}
 
 			if (status & PICOXCELL_SPI_STATUS_RFNE) {
-				/* We have some data available in the receive fifo */
+				/* We have some data available in the receive
+				 * fifo
+				 */
 				value = (u8) SPI_READ (SSI_DATA_REG_OFFSET);
 
-				/* We do not want this data until it is 'valid',
-				   i.e. we have finished transmitting all the Tx data */
+				/* We do not want this data until it is
+				 * 'valid', i.e. we have finished transmitting
+				 * all the Tx data
+				 */
 				if (len_rx < total_tx_count) {
 					/* Just chuck the read data away */
 				} else {
@@ -536,14 +460,15 @@ out:
 		}
 	}
 out:
-	if (flags & SPI_XFER_END) {
-		/*
-		 * If we have finished transmitting and we have no data to receive
-		 * wait until the transfer is completely done before we deactivate CS.
+	if ((flags & SPI_XFER_END) || (flags == 0)) {
+		/* If we have finished transmitting and we have no data to
+		 * receive wait until the transfer is completely done before
+		 * we deactivate CS.
 		 */
 		if ((len_tx >= total_tx_count) && (byte_count_rx == 0)) {
 			/* Make sure the SPI block has actually started
-			   doing something... */
+			 * doing something...
+			 */
 			udelay (500);
 
 			do {
@@ -555,18 +480,21 @@ out:
 
 		spi_cs_deactivate (slave);
 
-		if (spi_slave->dout_copy) {
-			free (spi_slave->dout_copy);
-			spi_slave->dout_copy = NULL;
-		}
+		if (flags & SPI_XFER_END) {
+			/* Only if we are really at the end of a transaction
+			 * do we delete the saved data used to Tx
+			 */
+			if (spi_slave->dout_copy) {
+				free (spi_slave->dout_copy);
+				spi_slave->dout_copy = NULL;
+			}
 
-		spi_slave->byte_count_tx = 0;
+			spi_slave->byte_count_tx = 0;
+		}
 	}
 
 	return SUCCESS;
-
 }
-#endif /* USE_GPIO_AS_CHIP_SELECT */
 
 void spi_cs_activate (struct spi_slave *slave)
 {
@@ -590,30 +518,20 @@ void spi_cs_activate (struct spi_slave *slave)
 	/* Obtain the chip select are we using */
 	chip_select = (u16) spi_slave->slave.cs;
 
-	/* Write to the Slave Enable Register */
+	/* Tell the SPI block the chip select we are using */
 	SPI_WRITE ((1 << chip_select), SSI_SLAVE_ENABLE_REG_OFFSET);
 
-	/* Sort out the SPI/EBI chip select muxing.
-	   Note: Set all chip select muxing to be SPI */
+	/* Sort out the SPI/EBI chip select muxing */
 	system_config = AXI2CFG_READ (AXI2CFG_SYS_CONFIG_REG_OFFSET);
 	system_config &= ~(AXI2CFG_DECODE_MUX_0 |
 			   AXI2CFG_DECODE_MUX_1 |
 			   AXI2CFG_DECODE_MUX_2 | AXI2CFG_DECODE_MUX_3);
 
 	AXI2CFG_WRITE (system_config, AXI2CFG_SYS_CONFIG_REG_OFFSET);
-
-#ifdef USE_GPIO_AS_CHIP_SELECT
-	/* Assert the 'cs' */
-	*(unsigned int *)(PICOXCELL_GPIO_BASE + GPIO_SW_PORT_A_DR_REG_OFFSET) &=
-	    ~(GPIO_BIT_2);
-#endif
-
 }
 
 void spi_cs_deactivate (struct spi_slave *slave)
 {
-	struct picoxcell_spi_slave *spi_slave;
-	u16 chip_select = 0;
 	u32 system_config = 0;
 
 	/* Have we been passed a valid data structure handle ? */
@@ -624,33 +542,19 @@ void spi_cs_deactivate (struct spi_slave *slave)
 		return;
 	}
 
-	spi_slave = container_of (slave, struct picoxcell_spi_slave, slave);
-
 	/* Make sure the SPI is disabled */
 	SPI_WRITE (PICOXCELL_SPI_DISABLE, SSI_ENABLE_REG_REG_OFFSET);
 
-	/* Obtain the chip select are we using */
-	chip_select = (u16) spi_slave->slave.cs;
-
-	/* Write to the Slave Enable Register,
-	   Note: Just disable all chip selects for now */
+	/* Just disable all the spi block chip selects */
 	SPI_WRITE (PICOXCELL_SPI_SLAVES_DISABLE, SSI_SLAVE_ENABLE_REG_OFFSET);
 
-	/* Sort out the SPI/EBI chip select muxing.
-	   Note: Set all chip select muxing to be EBI */
+	/* Sort out the SPI/EBI chip select muxing */
 	system_config = AXI2CFG_READ (AXI2CFG_SYS_CONFIG_REG_OFFSET);
 	system_config |= (AXI2CFG_DECODE_MUX_0 |
 			  AXI2CFG_DECODE_MUX_1 |
 			  AXI2CFG_DECODE_MUX_2 | AXI2CFG_DECODE_MUX_3);
 
 	AXI2CFG_WRITE (system_config, AXI2CFG_SYS_CONFIG_REG_OFFSET);
-
-#ifdef USE_GPIO_AS_CHIP_SELECT
-	/* Negate the 'cs' */
-	*(unsigned int *)(PICOXCELL_GPIO_BASE + GPIO_SW_PORT_A_DR_REG_OFFSET) |=
-	    GPIO_BIT_2;
-#endif
-
 }
 
 #endif /* CONFIG_DW_SPI */
-- 
1.7.0.4

